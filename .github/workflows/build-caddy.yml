name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
#     permissions:
#       contents: write
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, linux]
        goarch: [amd64, 386]
        include:
          # BEGIN Other architectures
          # BEGIN riscv64 & ARM64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          # END riscv64 & ARM64
          # BEGIN S390X
          - goos: linux
            goarch: s390x
          # END S390X
          # END Other architectures
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0
    steps:
      - name: Show workflow information 
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
          check-latest: true

      - name: Build xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Show
        run: |
          pwd
          ls -al
          type go
          echo $GOPATH/bin
          ls -al $GOPATH/bin
      
      # - name: Replace Custom to Commit ID
      #   if: github.event_name != 'release'
      #   run: |
      #     ID=$(git rev-parse --short ${{ github.sha }})
      #     if [ "${{ github.event_name }}" == 'pull_request' ]
      #     then
      #       ID=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})
      #     fi
      #     sed -i '/build/ s/Custom/'$ID'/' ./core/core.go
 
      - name: Build caddy-trojan
        run: xcaddy build --with github.com/imgk/caddy-trojan


      - name: Show info
        run: |
          pwd
          ls -al



      # - name: Create ZIP archive
      #   shell: bash
      #   run: |
      #     pushd build_assets || exit 1
      #     touch -mt $(date +%Y01010000) *
      #     zip -9vr ../Web-${{ env.ASSET_NAME }}.zip .
      #     popd || exit 1
      #     FILE=./Web-${{ env.ASSET_NAME }}.zip
      #     DGST=$FILE.dgst
      #     for METHOD in {"md5","sha1","sha256","sha512"}
      #     do
      #       openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
      #     done

      # - name: Change the name
      #   run: |
      #     mv build_assets Web-${{ env.ASSET_NAME }}

      # - name: Upload files to Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: Web-${{ env.ASSET_NAME }}
      #     path: |
      #       ./Web-${{ env.ASSET_NAME }}/*

      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: ./Web-${{ env.ASSET_NAME }}.zip*
      #     tag: ${{ github.ref }}
      #     file_glob: true
